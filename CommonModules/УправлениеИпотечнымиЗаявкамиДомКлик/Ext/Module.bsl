
#Область МетодыAPI                         

Функция ПолучитьСекреты(ПараметрыAPI) Экспорт
	
	client_id = "";	
	client_secret = "";
	
	УстановитьПривилегированныйРежим(Истина);
    Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыAPI, "Секреты");
	Если ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("client_id") И Данные.Свойство("client_secret") Тогда
		client_id = Данные.client_id;
		client_secret = Данные.client_secret;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Новый Структура("client_id, client_secret", client_id, client_secret);
	
КонецФункции

Процедура ЗаписатьСекреты(ПараметрыAPI, client_id, client_secret) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = Новый Структура("client_id, client_secret", client_id, client_secret);
    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПараметрыAPI, Данные, "Секреты");
    УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ВыполнитьАвторизацию(ПараметрыAPI, Ошибки = "", Тест = Ложь) Экспорт

	ТокенДоступа = "";
	
	Секреты = ПолучитьСекреты(ПараметрыAPI);
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);

	Boundary = "----" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", ""); 
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Authorization", "Basic " + ПолучитьBase64ЗаголовокАвторизации(Секреты.client_id, Секреты.client_secret));
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
	
	HTTPМетод = "POST";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/token";	
	ТелоЗапроса = "--" + Boundary + "
	|Content-Disposition: form-data; name=""grant_type""
	|
	|client_credentials
	|--" + Boundary + "--";
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ОтветСервера.Свойство("error") Тогда
			Ошибки = ОтветСервера.error;	
		Иначе	
			РегМен = РегистрыСведений.ДанныеАвторизацииДомКлик.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(РегМен, ОтветСервера);			
			РегМен.client_id = Секреты.client_id;
			РегМен.client_secret = Секреты.client_secret;
			РегМен.ГраницаДоступности = ТекущаяДата() + РегМен.expires_in - ПараметрыЗапроса.Таймаут;
			РегМен.Записать();
			
			ТокенДоступа = РегМен.access_token;
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Не удалось получить результат запроса";
	КонецЕсли;
	
	Возврат ТокенДоступа;
	
КонецФункции

Функция БанкОфисы(ПараметрыAPI, Ошибки = "", Тест = Ложь) Экспорт

	Офисы = Новый Массив;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат Офисы;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("'Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	
	HTTPМетод = "GET";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/bankoffices";
	ТелоЗапроса = "";
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("error") Тогда
			Ошибки = ОтветСервера.error;	
		Иначе	
			Офисы = ОтветСервера;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Офисы;
	
КонецФункции	

Функция Словарь(ПараметрыAPI, Ошибки = "", Тест = Ложь) Экспорт

	Данные = Новый Массив;
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	Секреты = ПолучитьСекреты(ПараметрыAPI);	
	access_token = ПолучитьТокенДоступа(Секреты.client_id, Секреты.client_secret);
	access_token = ?(ЗначениеЗаполнено(access_token), access_token, ВыполнитьАвторизацию(ПараметрыAPI, Ошибки, Тест));
	Если НЕ ЗначениеЗаполнено(access_token) Тогда
		Ошибки = Ошибки + Символы.ПС + "Не удалось выполнить авторизацию.";
		Возврат Данные;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("'Accept", "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + access_token);
	
	HTTPМетод = "GET";
	Сервер = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
	Прокси = ПараметрыПодключения.Прокси;
	АдресРесурса = "/application/api/v2/dictionaries";
	ТелоЗапроса = "";
	
 	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("error") Тогда
			Ошибки = ОтветСервера.error;	
		Иначе	
			Данные = ОтветСервера;	
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область HTTPЗапрос

Функция ВыполнитьHTTPЗапрос(ПараметрыЗапроса, Заголовки)

	HTTPЗапрос = ПодготовитьHTTPЗапрос(ПараметрыЗапроса.АдресРесурса, Заголовки, ПараметрыЗапроса.ТелоЗапроса, ПараметрыЗапроса.HTTPМетод); 
	HTTPОтвет = Неопределено;                                                                                                          
		
	Попытка		
		HTTPСоединение = Новый HTTPСоединение(ПараметрыЗапроса.Сервер, ПараметрыЗапроса.Порт, , , ПараметрыЗапроса.Прокси, ПараметрыЗапроса.Таймаут, ПараметрыЗапроса.ЗащищенноеСоединение);		
		Если ПараметрыЗапроса.HTTPМетод = "POST" Тогда
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли ПараметрыЗапроса.HTTPМетод = "GET" Тогда
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		Иначе
			HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(ПараметрыЗапроса.HTTPМетод, HTTPЗапрос);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'HTTP запрос ДомКлик'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	Если НЕ HTTPОтвет = Неопределено Тогда		
		ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();		
		
		ОтветСервера = Неопределено;
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
			ОтветСервера = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'HTTP ответ ДомКлик'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , "Ошибка:" + ТекстОтвета + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
		Возврат ОтветСервера;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПодготовитьHTTPЗапрос(АдресРесурса, Заголовки, ПараметрыЗапроса, HTTPМетод = "POST", Boundary = "") Экспорт
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Строка") Тогда		
		HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);	
	Иначе		
		Если HTTPМетод = "POST" Тогда			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);			
			СтрокаПараметров = ЗаписьJSON.Закрыть();
			HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		ИначеЕсли HTTPМетод = "GET" Тогда
			СписокПараметров = Новый Массив;
			Для Каждого Параметр Из ПараметрыЗапроса Цикл
				СписокПараметров.Добавить(Параметр.Ключ + "=" + КодироватьСтроку(Параметр.Значение, СпособКодированияСтроки.КодировкаURL));
			КонецЦикла;
			СтрокаПараметров = СтрСоединить(СписокПараметров, "&");			
			АдресРесурса = АдресРесурса + ?(НЕ ПустаяСтрока(СтрокаПараметров), "?" + СтрокаПараметров, "");
			HTTPЗапрос.АдресРесурса = АдресРесурса;
		Иначе
			СтрокаПараметров = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат HTTPЗапрос;

КонецФункции

Функция ПолучитьПрокси()
	
	Прокси = Новый ИнтернетПрокси;
	Прокси.Установить("HTTP", "Mosrfrfw01.absgroup.ru", 8080); //mosrrasfw01.absgroup.ru - 403
	                             
	Возврат Прокси; //ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https")
	
КонецФункции

Функция ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси, Порт = Неопределено, Пользователь = Неопределено, Пароль = Неопределено)
	
	//ssl = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
	ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Сервер", Сервер);
	ПараметрыЗапроса.Вставить("Порт", Порт);
	ПараметрыЗапроса.Вставить("Пользователь", Неопределено);
	ПараметрыЗапроса.Вставить("Пароль", Неопределено);
	ПараметрыЗапроса.Вставить("Прокси", Прокси); //ПолучитьПрокси() 
	ПараметрыЗапроса.Вставить("Таймаут", 60);
	ПараметрыЗапроса.Вставить("ЗащищенноеСоединение", ssl); 
	
	ПараметрыЗапроса.Вставить("HTTPМетод", HTTPМетод);	
	ПараметрыЗапроса.Вставить("АдресРесурса", АдресРесурса);
	ПараметрыЗапроса.Вставить("ТелоЗапроса", ТелоЗапроса);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПолучитьBase64ЗаголовокАвторизации(ID, Secret)

    КодировкаФайла = КодировкаТекста.UTF8;
    ВременныйФайл = ПолучитьИмяВременногоФайла();
	
	Запись = Новый ЗаписьТекста(ВременныйФайл, КодировкаФайла);
    Запись.Записать(ID + ":" + Secret);
    Запись.Закрыть();

    ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
    Результат = Base64Строка(ДвДанные);
	
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	Результат = СтрЗаменить(Результат, Символы.ПС, "");	
	
    УдалитьФайлы(ВременныйФайл);

    Результат = Сред(Результат, 5);

    Возврат Результат;

КонецФункции

#КонецОбласти

#Область Вспоимогательное

Функция ПолучитьПараметрыПодключения(ПараметрыAPI, Ответственный = Неопределено, ВыводитьПараметры = Ложь, ДляАвторизации = Ложь) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПараметрыПодключенияAPI.Ссылка.username КАК username_common,
	|	ПараметрыПодключенияAPI.Ссылка.password КАК password_common,
	|	ПараметрыПодключенияAPI.Ссылка.АдресДляРассылки КАК АдресДляРассылки_common,
	|	ПараметрыПодключенияAPI.Ссылка.ПродуктивныйСтенд КАК ПродуктивныйСтенд,
	|	ПараметрыПодключенияAPI.Ссылка.ТестовыйСтенд КАК ТестовыйСтенд,
	|	ПараметрыПодключенияAPI.Ссылка.ПродуктивныйСтенд_Token КАК ПродуктивныйСтенд_Token,
	|	ПараметрыПодключенияAPI.Ссылка.ТестовыйСтенд_Token КАК ТестовыйСтенд_Token,
	|	ПараметрыПодключенияAPI.ИспользоватьПрокси КАК ИспользоватьПрокси,
	|	ПараметрыПодключенияAPI.ПротоколПрокси КАК ПротоколПрокси,
	|	ПараметрыПодключенияAPI.ПроксиСервер КАК ПроксиСервер,
	|	ПараметрыПодключенияAPI.ПортПрокси КАК ПортПрокси,
	|	ПараметрыПодключенияAPI.ИмяПользователяПрокси КАК ИмяПользователяПрокси,
	|	ПараметрыПодключенияAPI.ПарольПрокси КАК ПарольПрокси,
	|	ПараметрыПодключенияAPI.ИспользоватьАутентификациюОСПрокси КАК ИспользоватьАутентификациюОСПрокси,
	|	ПараметрыПодключенияAPI.ГруппаПользователя КАК ГруппаПользователя,
	|	ПараметрыПодключенияAPI.username КАК username,
	|	ПараметрыПодключенияAPI.password КАК password,
	|	ПараметрыПодключенияAPI.АдресДляРассылки КАК АдресДляРассылки,
	|	ИСТИНА КАК Использование
	|ИЗ
	|	Справочник.ПараметрыПодключенияAPIИпотечныхБанков.НастройкиПравДоступаПользователей КАК ПараметрыПодключенияAPI
	|ГДЕ
	|	ПараметрыПодключенияAPI.Ссылка = &ПараметрыAPI
	|	И ПараметрыПодключенияAPI.ГруппаПользователя В(&ГруппыПользователя)
	|	И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПодключенияAPIИпотечныхБанков.username,
	|	ПараметрыПодключенияAPIИпотечныхБанков.password,
	|	ПараметрыПодключенияAPIИпотечныхБанков.АдресДляРассылки,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПродуктивныйСтенд,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ТестовыйСтенд,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПродуктивныйСтенд_Token,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ТестовыйСтенд_Token,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ИспользоватьПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПротоколПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПроксиСервер,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПортПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ИмяПользователяПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПарольПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ИспользоватьАутентификациюОСПрокси,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ПараметрыПодключенияAPIИпотечныхБанков.АдресДляРассылки,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ПараметрыПодключенияAPIИпотечныхБанков КАК ПараметрыПодключенияAPIИпотечныхБанков
	|ГДЕ
	|	ПараметрыПодключенияAPIИпотечныхБанков.Ссылка = &ПараметрыAPI";	
		
	ГруппыПользователя = ПолучитьГруппыПользователя(Ответственный);
	Если ГруппыПользователя = Неопределено ИЛИ НЕ ГруппыПользователя.Количество() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ГруппаПользователя В(&ГруппыПользователя)", "И ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа", "");
	Иначе
		Если ГруппыПользователя.Количество() > 1 Тогда
			ОбъектДоступа = ПолучитьОсновнойОбъектПользователя(Ответственный);
			Если ЗначениеЗаполнено(ОбъектДоступа) Тогда
				Запрос.УстановитьПараметр("ОбъектДоступа", ОбъектДоступа);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ГруппаПользователя В(&ГруппыПользователя)", "");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа", "");
			КонецЕсли;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа", "");	
		КонецЕсли;
		Запрос.УстановитьПараметр("ГруппыПользователя", ГруппыПользователя);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПараметрыAPI", ПараметрыAPI);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтруктураПараметры = Новый Структура("username, password, username_common, password_common, АдресДляРассылки_common, ПродуктивныйСтенд, ТестовыйСтенд, ПродуктивныйСтенд_Token, ТестовыйСтенд_Token, Прокси, ГруппаПользователя, ПроксиСервер, АдресДляРассылки");
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПараметры, Выборка);
			Если Выборка.ИспользоватьПрокси Тогда
				Прокси = Новый ИнтернетПрокси;
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
				Прокси.Установить(Выборка.ПротоколПрокси, Выборка.ПроксиСервер, Выборка.ПортПрокси, Выборка.ИмяПользователяПрокси, Выборка.ПарольПрокси, Выборка.ИспользоватьАутентификациюОСПрокси); //Прокси.Установить("https", "mosrfrfw01.absgroup.ru", "8080", , , Истина); 
				СтруктураПараметры.Прокси = Прокси;
			КонецЕсли;
			Если НЕ Выборка.Использование ИЛИ ДляАвторизации Тогда
				СтруктураПараметры.username = Выборка.username_common;
				СтруктураПараметры.password = Выборка.password_common;
			КонецЕсли;				
		КонецЕсли;
		
		Если ВыводитьПараметры Тогда
			Для каждого Элемент Из СтруктураПараметры Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.Ключ + " : " + Элемент.Значение);	
			КонецЦикла;
		КонецЕсли;
		
		Возврат СтруктураПараметры;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОсновнойОбъектПользователя(Пользователь = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОсновныеОбъектыДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа
	|ИЗ
	|	РегистрСведений.ОсновныеОбъектыДоступаПользователей КАК ОсновныеОбъектыДоступаПользователей
	|ГДЕ
	|	ОсновныеОбъектыДоступаПользователей.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ОбъектДоступа;	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьГруппыПользователя(Пользователь = Неопределено) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГруппыПользователейСостав.Ссылка КАК Группа
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Группа");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТокенДоступа(client_id, client_secret)
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеАвторизацииДомКлик.access_token КАК access_token,
	|	ДанныеАвторизацииДомКлик.ГраницаДоступности КАК ГраницаДоступности
	|ИЗ
	|	РегистрСведений.ДанныеАвторизацииДомКлик КАК ДанныеАвторизацииДомКлик
	|ГДЕ
	|	ДанныеАвторизацииДомКлик.client_id = &client_id
	|	И ДанныеАвторизацииДомКлик.client_secret = &client_secret";
	
	Запрос.УстановитьПараметр("client_id", client_id);
	Запрос.УстановитьПараметр("client_secret", client_secret);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если ВыборкаДетальныеЗаписи.ГраницаДоступности >= ТекущаяДата() Тогда
				Возврат ВыборкаДетальныеЗаписи.access_token;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

#Область Вспоимогательное

Функция СоздатьАнкету(ПараметрыAPI, АнкетаСсылка) Экспорт
	
	КонтактноеЛицо = АнкетаСсылка.КонтактноеЛицо;
	//Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
	СтруктураПараметров = ПолучитьКонтактныеДанныеКлиента(КонтактноеЛицо);
	
	ФИОКлиента = КонтактноеЛицо.ФИО;
	//ДатаРожденияКлиента = КонтактноеЛицо.ДатаРождения;
	//АдресФактическогоПроживания = СтруктураПараметров.АдресФактическогоПроживания;
	EmailКлиента = СтруктураПараметров.EmailКлиента;
	НомерТелефонаКлиента = СтруктураПараметров.НомерТелефона;
	//СерияНомерПаспорта = СтруктураПараметров.СерияНомерПаспорта;	
	//СерияНомерПаспорта = "" + СтрЗаменить(НайтиВТаблицеПоКоду(РезТЗ, "000000327"), " ", "") + " " + СтрЗаменить(НайтиВТаблицеПоКоду(РезТЗ, "000000328"), " ", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Маппинг_ВопросыАнкетыДомКлик.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	Маппинг_ВопросыАнкетыДомКлик.ПараметрДомКлик КАК ПараметрДомКлик,
	|	Маппинг_ВопросыАнкетыДомКлик.Обязательный КАК Обязательный,
	|	Маппинг_ВопросыАнкетыДомКлик.ЭтоКоллекция КАК ЭтоКоллекция
	|ИЗ
	|	РегистрСведений.Маппинг_ВопросыАнкетыДомКлик КАК Маппинг_ВопросыАнкетыДомКлик";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Конецесли;
			
	ВыгрузкаСтруктурыВопросов = РезультатЗапроса.Выгрузить();
	ВопросыАнкетирования = ВыгрузкаСтруктурыВопросов.ВыгрузитьКолонку("ЭлементарныйВопрос");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Маппинг_ОтветыАнкетыДомКлик.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	Маппинг_ОтветыАнкетыДомКлик.Ответ КАК Ответ,
	|	Маппинг_ОтветыАнкетыДомКлик.ЗначениеПараметраДомКлик КАК ЗначениеПараметраДомКлик
	|ИЗ
	|	РегистрСведений.Маппинг_ОтветыАнкетыДомКлик КАК Маппинг_ОтветыАнкетыДомКлик";
	
	ВыгрузкаСтруктурыОтветов = РезультатЗапроса.Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Маппинг_АдресРегистрацииДомКлик.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	Маппинг_АдресРегистрацииДомКлик.ПараметрДомКлик КАК ПараметрДомКлик,
	|	Маппинг_АдресРегистрацииДомКлик.ПозицияВСтрокеСлияния КАК ПозицияВСтрокеСлияния,
	|	Маппинг_АдресРегистрацииДомКлик.РазделительСтрокиСлияния КАК РазделительСтрокиСлияния
	|ИЗ
	|	РегистрСведений.Маппинг_АдресРегистрацииДомКлик КАК Маппинг_АдресРегистрацииДомКлик
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрДомКлик,
	|	ПозицияВСтрокеСлияния
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Маппинг_ФактическийАдресДомКлик.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	Маппинг_ФактическийАдресДомКлик.ПараметрДомКлик КАК ПараметрДомКлик,
	|	Маппинг_ФактическийАдресДомКлик.ПозицияВСтрокеСлияния КАК ПозицияВСтрокеСлияния,
	|	Маппинг_ФактическийАдресДомКлик.РазделительСтрокиСлияния КАК РазделительСтрокиСлияния
	|ИЗ
	|	РегистрСведений.Маппинг_ФактическийАдресДомКлик КАК Маппинг_ФактическийАдресДомКлик
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрДомКлик,
	|	ПозицияВСтрокеСлияния";
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	Если РезультатПакет.Количество() Тогда
		РезультатЗапроса = РезультатПакет[0];
		ВыгрузкаСтруктурыВопросов_АдресРегистрации = РезультатЗапроса.Выгрузить();
		ВопросыАнкетирования_Адреса = ВыгрузкаСтруктурыВопросов_АдресРегистрации.ВыгрузитьКолонку("ЭлементарныйВопрос");	
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВопросыАнкетирования, ВопросыАнкетирования_Адреса, Истина);
		
		РезультатЗапроса = РезультатПакет[1];
		ВыгрузкаСтруктурыВопросов_ФактическийАдрес = РезультатЗапроса.Выгрузить();
		ВопросыАнкетирования_Адреса = ВыгрузкаСтруктурыВопросов_ФактическийАдрес.ВыгрузитьКолонку("ЭлементарныйВопрос");	
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВопросыАнкетирования, ВопросыАнкетирования_Адреса, Истина);		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтветыНаВопросыАнкет.Ответ,
	|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос,
	|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос.Код КАК Код
	|ИЗ
	|	РегистрСведений.ОтветыНаВопросыАнкет КАК ОтветыНаВопросыАнкет
	|ГДЕ
	|	ОтветыНаВопросыАнкет.Регистратор = &Регистратор
	|	И ОтветыНаВопросыАнкет.ЭлементарныйВопрос В(&ЭлементарныйВопрос)";
	
	Запрос.УстановитьПараметр("Регистратор", АнкетаСсылка);
	Запрос.УстановитьПараметр("ЭлементарныйВопрос", ВопросыАнкетирования);

	СтруктураАнкеты = Неопределено;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда		
		РезультатЗаполнения = РезультатЗапроса.Выгрузить();
		СтруктураАнкеты = ПолучитьСтруктуруАнкеты(ПараметрыAPI, РезультатЗаполнения, ВыгрузкаСтруктурыВопросов, ВыгрузкаСтруктурыОтветов, ВыгрузкаСтруктурыВопросов_АдресРегистрации, ВыгрузкаСтруктурыВопросов_ФактическийАдрес);
	КонецЕсли;
	
	Возврат СтруктураАнкеты;
	
КонецФункции	

Функция ПолучитьСтруктуруАнкеты(ПараметрыAPI, РезультатЗаполнения, ВыгрузкаСтруктурыВопросов, ВыгрузкаСтруктурыОтветов, ЗапрашиватьСтуктуруАдресаDaData = Ложь, ВыгрузкаСтруктурыВопросов_АдресРегистрации = Неопределено, ВыгрузкаСтруктурыВопросов_ФактическийАдрес = Неопределено)
	
	СтруктураАнкеты = Новый Структура;
	Для каждого Элемент Из ВыгрузкаСтруктурыВопросов Цикл
		ЗначениеПараметра = НайтиВТаблицеПоЗначению(РезультатЗаполнения, Элемент.ЭлементарныйВопрос, ВыгрузкаСтруктурыОтветов);
		Если Элемент.ЭтоКоллекция Тогда
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(ЗначениеПараметра);
			СтруктураАнкеты.Вставить(Элемент.ПараметрДомКлик, МассивПараметров);	
		Иначе
			СтруктураАнкеты.Вставить(Элемент.ПараметрДомКлик, ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗапрашиватьСтуктуруАдресаDaData Тогда		
		Если НЕ ВыгрузкаСтруктурыВопросов_ФактическийАдрес = Неопределено Тогда
			ФактическийАдрес = ПолучитьТекстовоеПредставлениеАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов_ФактическийАдрес);
			СтруктураАнкеты.Вставить("actualAddress", НормализоватьАдресDaData(ПараметрыAPI, ФактическийАдрес));	
		КонецЕсли;
		Если НЕ ВыгрузкаСтруктурыВопросов_АдресРегистрации = Неопределено Тогда
			АдресРегистрации = ПолучитьТекстовоеПредставлениеАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов_АдресРегистрации);
			СтруктураАнкеты.Вставить("registrationAddress", НормализоватьАдресDaData(ПараметрыAPI, АдресРегистрации));
		КонецЕсли;		
	Иначе
		Если НЕ ВыгрузкаСтруктурыВопросов_ФактическийАдрес = Неопределено Тогда
			СтруктураАнкеты.Вставить("actualAddress", ПолучитьСтруктуруАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов_ФактическийАдрес));
		КонецЕсли;		
		Если НЕ ВыгрузкаСтруктурыВопросов_АдресРегистрации = Неопределено Тогда
			СтруктураАнкеты.Вставить("registrationAddress", ПолучитьСтруктуруАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов_АдресРегистрации));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураАнкеты;
	
КонецФункции

Функция ПолучитьКонтактныеДанныеКлиента(Клиент)
	
	СтруктураПараметров = Новый Структура("АдресФактическогоПроживания, СерияНомерПаспорта, НомерТелефона, EmailКлиента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление КАК Представление,
		|	"""" КАК Серия,
		|	"""" КАК Номер,
		|	1 КАК Ключ
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"""",
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	2
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			&Период,
		|			ФизЛицо = &ФизЛицо
		|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление,
		|	"""",
		|	"""",
		|	3
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ОсновнойТелефонКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление,
		|	"""",
		|	"""",
		|	4
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКлиента)";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизЛицо", Клиент);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураПараметров.АдресФактическогоПроживания = "";
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ключ = 1 Тогда
				СтруктураПараметров.АдресФактическогоПроживания = Выборка.Представление;
			ИначеЕсли Выборка.Ключ = 2 Тогда
				СтруктураПараметров.СерияНомерПаспорта = СтрЗаменить(Выборка.Серия, " ", "") + СтрЗаменить(Выборка.Номер, " ", "");
			ИначеЕсли Выборка.Ключ = 3 Тогда
				СтруктураПараметров.НомерТелефона = Выборка.Представление;
			ИначеЕсли Выборка.Ключ = 4 Тогда
				СтруктураПараметров.EmailКлиента = Выборка.Представление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьТекстовоеПредставлениеАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов) Экспорт
	
	ТекстовоеПредставлениеАдресаРегистрации = "";
	
	ТекущийПараметр = Неопределено;
	Для каждого Элемент Из ВыгрузкаСтруктурыВопросов Цикл				
		Если НЕ ЗначениеЗаполнено(Элемент.ЭлементарныйВопрос) Тогда
			Продолжить;
		КонецЕсли;		
		Если ТекущийПараметр = Элемент.ПараметрДомКлик Тогда
			Продолжить;		
		КонецЕсли;		
		ТекущийПараметр = Элемент.ПараметрДомКлик;		
		НайденныеСтроки = ВыгрузкаСтруктурыВопросов.НайтиСтроки("ПараметрДомКлик", Элемент.ПараметрДомКлик);		
		Если НайденныеСтроки.Количество() > 1 Тогда
			ЗначениеПараметраСтрокой = "";
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗначениеПараметра = НайтиВТаблицеПоЗначению(РезультатЗаполнения, Элемент.ЭлементарныйВопрос);
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПараметраСтрокой = ?(ЗначениеЗаполнено(ЗначениеПараметраСтрокой), ЗначениеПараметраСтрокой + ТекущийПараметр.РазделительСтрок + ЗначениеПараметра, ЗначениеПараметра);
			КонецЦикла;
			Если ЗначениеЗаполнено(ЗначениеПараметраСтрокой) Тогда
				ТекстовоеПредставлениеАдресаРегистрации = ?(ЗначениеЗаполнено(ТекстовоеПредставлениеАдресаРегистрации), ТекстовоеПредставлениеАдресаРегистрации + ", " + ЗначениеПараметраСтрокой, ЗначениеПараметраСтрокой);
			КонецЕсли; 									
		Иначе
			ЗначениеПараметра = НайтиВТаблицеПоЗначению(РезультатЗаполнения, Элемент.ЭлементарныйВопрос);	
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				ТекстовоеПредставлениеАдресаРегистрации = ?(ЗначениеЗаполнено(ТекстовоеПредставлениеАдресаРегистрации), ТекстовоеПредставлениеАдресаРегистрации + ", " + ЗначениеПараметра, ЗначениеПараметра);
			КонецЕсли; 						
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстовоеПредставлениеАдресаРегистрации;
	
КонецФункции	

Функция ПолучитьСтруктуруАдреса(РезультатЗаполнения, ВыгрузкаСтруктурыВопросов) Экспорт
	
	СтруктураАдресаРегистрации = Новый Структура();
	
	ТекущийПараметр = Неопределено;
	Для каждого Элемент Из ВыгрузкаСтруктурыВопросов Цикл		
		Если НЕ ЗначениеЗаполнено(Элемент.ЭлементарныйВопрос) Тогда
			Продолжить;
		КонецЕсли;				
		Если ТекущийПараметр = Элемент.ПараметрДомКлик Тогда
			Продолжить;		
		КонецЕсли;		
		ТекущийПараметр = Элемент.ПараметрДомКлик;
		ЗначениеПараметра = "";
		НайденныеСтроки = ВыгрузкаСтруктурыВопросов.НайтиСтроки("ПараметрДомКлик", Элемент.ПараметрДомКлик);		
		Если НайденныеСтроки.Количество() > 1 Тогда
			ЗначениеПараметраСтрокой = "";
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ЗначениеПараметра = НайтиВТаблицеПоЗначению(РезультатЗаполнения, Элемент.ЭлементарныйВопрос);
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеПараметраСтрокой = ?(ЗначениеЗаполнено(ЗначениеПараметраСтрокой), ЗначениеПараметраСтрокой + ТекущийПараметр.РазделительСтрок + ЗначениеПараметра, ЗначениеПараметра);
			КонецЦикла;
			Если ЗначениеЗаполнено(ЗначениеПараметраСтрокой) Тогда
				ЗначениеПараметра = ЗначениеПараметраСтрокой;
			КонецЕсли; 									
		Иначе
			ЗначениеПараметра = НайтиВТаблицеПоЗначению(РезультатЗаполнения, Элемент.ЭлементарныйВопрос);						
		КонецЕсли;		
		СтруктураАдресаРегистрации.Вставить(Элемент.ПараметрДомКлик, ЗначениеПараметра);		
	КонецЦикла;
	
	Возврат СтруктураАдресаРегистрации;
	
КонецФункции

Функция НайтиВТаблицеПоКоду(ТЗ, Код)
	
	Ответ = Неопределено;
	НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Код", Код));
	Если НайденныеСтроки.Количество() Тогда	
		Ответ = НайденныеСтроки[0].Ответ;
		Если ТипЗнч(Ответ) = Тип("СправочникСсылка.ВариантыОтветовАнкет") Тогда
			Ответ = СокрЛП(Ответ);
		ИначеЕсли ТипЗнч(Ответ) = Тип("Дата") Тогда
			Ответ = Формат(Ответ, "ДФ=yyyy-MM-dd");
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Ответ;
	
КонецФункции

Функция НайтиВТаблицеПоЗначению(РезультатЗаполнения, ЭлементарныйВопрос, ВыгрузкаСтруктурыОтветов = Неопределено)
	
	Ответ = Неопределено;
	НайденныеСтроки = РезультатЗаполнения.НайтиСтроки(Новый Структура("ЭлементарныйВопрос", ЭлементарныйВопрос));
	Если НайденныеСтроки.Количество() Тогда	
		Ответ = НайденныеСтроки[0].Ответ;
		Если ТипЗнч(Ответ) = Тип("СправочникСсылка.ВариантыОтветовАнкет") Тогда
			Если ВыгрузкаСтруктурыОтветов = Неопределено Тогда
				ОтветДомКлик = НайтиВТаблицеОтветов(ВыгрузкаСтруктурыОтветов, ЭлементарныйВопрос, Ответ); 
				Ответ = ?(НЕ ЗначениеЗаполнено(ОтветДомКлик), СокрЛП(Ответ), ОтветДомКлик);
			Иначе
				Ответ = СокрЛП(Ответ);	
			КонецЕсли;
		ИначеЕсли ТипЗнч(Ответ) = Тип("Дата") Тогда
			Ответ = Формат(Ответ, "ДФ=yyyy-MM-dd");
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Ответ;
	
КонецФункции

Функция НайтиВТаблицеОтветов(ВыгрузкаСтруктурыОтветов, ЭлементарныйВопрос, Ответ)

	Ответ = Неопределено;
	НайденныеСтроки = ВыгрузкаСтруктурыОтветов.НайтиСтроки(Новый Структура("ЭлементарныйВопрос, Ответ", ЭлементарныйВопрос, Ответ));
	Если НайденныеСтроки.Количество() Тогда	
		Ответ = НайденныеСтроки[0].ЗначениеПараметраДомКлик;
	КонецЕсли;	
	
	Возврат Ответ;
	
КонецФункции	
	
#КонецОбласти

#Область DaData

Функция НормализоватьАдресDaData(ПараметрыAPI, Адрес, Ошибки = "") Экспорт
		
	СтруктураАдреса = Неопределено;
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Ошибки = "";
	КлючиДоступа = ПолучитьКлючиДоступаDaData(ПараметрыAPI);

	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type" , "application/json");
	ЗаголовокHTTP.Вставить("Authorization", "Token " + КлючиДоступа.APIКлюч);
	ЗаголовокHTTP.Вставить("X-Secret", КлючиДоступа.СекретныйКлюч);
		
	HTTPМетод = "POST";
	Сервер = "dadata.ru";
	Порт = 443;
	АдресРесурса = "/api/v2/clean/address";
	ТелоЗапроса = "[""" + Адрес + """]";
	Прокси = ПараметрыПодключения.Прокси;
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса(HTTPМетод, Сервер, АдресРесурса, ТелоЗапроса, Прокси, Порт);
	
	ОтветСервера = ВыполнитьHTTPЗапрос(ПараметрыЗапроса, ЗаголовокHTTP);	
	
	Если НЕ ОтветСервера = Неопределено Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") И ОтветСервера.Свойство("error") Тогда
			Ошибки = ОтветСервера.error;	
		ИначеЕсли ТипЗнч(ОтветСервера) = Тип("Массив") И ОтветСервера.Количество() Тогда	
			СтруктураАдреса = ПолучитьПустуюСтруктуруАдреса();
			ЗаполнитьЗначенияСвойств(СтруктураАдреса, ОтветСервера[0]);	
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Не удалось получить результат запроса";		
	КонецЕсли;
	
	Возврат СтруктураАдреса; 
	
КонецФункции

Функция ПолучитьПустуюСтруктуруАдреса_(ДобавлятьНеобязательныеПоля = Истина)
	
	СтруктураАдреса = Новый Структура();
	
	СтруктураАдреса.Вставить("postal_code");            
	СтруктураАдреса.Вставить("country");
	СтруктураАдреса.Вставить("region_type");
	СтруктураАдреса.Вставить("region");    
	СтруктураАдреса.Вставить("city_type");
	СтруктураАдреса.Вставить("city");
	СтруктураАдреса.Вставить("street_type");
	СтруктураАдреса.Вставить("street");
	СтруктураАдреса.Вставить("house_type");
	СтруктураАдреса.Вставить("house");	

	Если ДобавлятьНеобязательныеПоля Тогда		
		//СтруктураАдреса.Вставить("region_with_type");        
		//СтруктураАдреса.Вставить("city_with_type");
		//СтруктураАдреса.Вставить("settlement_with_type");     
		//СтруктураАдреса.Вставить("city_district_with_type");  
		//СтруктураАдреса.Вставить("street_with_type");    
		
		СтруктураАдреса.Вставить("area_type");
		СтруктураАдреса.Вставить("area");		     
				
		СтруктураАдреса.Вставить("settlement_type");
		СтруктураАдреса.Вставить("settlement");		     
		
		СтруктураАдреса.Вставить("block_type");
		СтруктураАдреса.Вставить("block_type_full");
		СтруктураАдреса.Вставить("block");
	
		СтруктураАдреса.Вставить("flat");
		СтруктураАдреса.Вставить("flat_type");		
		СтруктураАдреса.Вставить("qc");                      	 
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьПустуюСтруктуруАдреса(ДобавлятьНеобязательныеПоля = Истина)

	СтруктураАдреса = Новый Структура();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Маппинг_АдресРегистрацииДомКлик.ПараметрДомКлик КАК ПараметрДомКлик,
	|	Маппинг_АдресРегистрацииДомКлик.Обязательный КАК Обязательный
	|ИЗ
	|	РегистрСведений.Маппинг_АдресРегистрацииДомКлик КАК Маппинг_АдресРегистрацииДомКлик
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Маппинг_ФактическийАдресДомКлик.ПараметрДомКлик,
	|	Маппинг_ФактическийАдресДомКлик.Обязательный
	|ИЗ
	|	РегистрСведений.Маппинг_ФактическийАдресДомКлик КАК Маппинг_ФактическийАдресДомКлик";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ДобавлятьНеобязательныеПоля Тогда
			СтруктураАдреса.Вставить(ВыборкаДетальныеЗаписи.ПараметрДомКлик);		
		Иначе	
			Если ВыборкаДетальныеЗаписи.Обязательный Тогда
				СтруктураАдреса.Вставить(ВыборкаДетальныеЗаписи.ПараметрДомКлик);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьКлючиДоступаDaData(ПараметрыAPI) Экспорт
	
	DaData_APIКлюч = "";	
	DaData_СекретныйКлюч = "";
	
	УстановитьПривилегированныйРежим(Истина);
    Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыAPI, "DaData");
	Если ТипЗнч(Данные) = Тип("Структура") И Данные.Свойство("DaData_APIКлюч") И Данные.Свойство("DaData_СекретныйКлюч") Тогда
		DaData_APIКлюч = Данные.DaData_APIКлюч;
		DaData_СекретныйКлюч = Данные.DaData_СекретныйКлюч;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Новый Структура("DaData_APIКлюч, DaData_СекретныйКлюч", DaData_APIКлюч, DaData_СекретныйКлюч);
		
КонецФункции

Процедура ЗаписатьКлючиДоступаDaData(ПараметрыAPI, client_id, client_secret) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = Новый Структура("DaData_APIКлюч, DaData_СекретныйКлюч", client_id, client_secret);
    ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПараметрыAPI, Данные, "DaData");
    УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти
